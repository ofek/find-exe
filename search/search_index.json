{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"find-exe","text":"CI/CD Docs Package Meta <p>This provides a library and CLI (<code>find-exe</code>) to find all executables given certain criteria.</p> <pre><code>&gt;&gt;&gt; import find_exe\n&gt;&gt;&gt; find_exe.with_prefix(\"py\")\n['/usr/bin/python', ...]\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install find-exe\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>find-exe</code> is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"api/","title":"API","text":""},{"location":"api/#find_exe.with_condition","title":"<code>with_condition(condition: Callable[[os.DirEntry], bool], *, paths: list[str] | None = None, path: str | None = None, mode: int = os.F_OK | os.X_OK) -&gt; list[str]</code>","text":"<p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[DirEntry], bool]</code> <p>The condition used for searching.</p> required <code>paths</code> <code>list[str] | None</code> <p>The list of paths to check. If <code>None</code>, the mutually exclusive <code>path</code> parameter is used.</p> <code>None</code> <code>path</code> <code>str | None</code> <p>The PATH to check, with each path separated by <code>os.pathsep</code>. If <code>None</code>, the PATH environment variable is used. Mutually exclusive with <code>paths</code>.</p> <code>None</code> <code>mode</code> <code>int</code> <p>The file mode used for checking access.</p> <code>F_OK | X_OK</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of absolute paths to executables that satisfy the given condition.</p>"},{"location":"api/#find_exe.with_pattern","title":"<code>with_pattern(pattern: str | re.Pattern[str], *, paths: list[str] | None = None, path: str | None = None, mode: int = os.F_OK | os.X_OK) -&gt; list[str]</code>","text":"<p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str | Pattern[str]</code> <p>The pattern used for searching.</p> required <code>paths</code> <code>list[str] | None</code> <p>The list of paths to check. If <code>None</code>, the mutually exclusive <code>path</code> parameter is used.</p> <code>None</code> <code>path</code> <code>str | None</code> <p>The PATH to check, with each path separated by <code>os.pathsep</code>. If <code>None</code>, the PATH environment variable is used. Mutually exclusive with <code>paths</code>.</p> <code>None</code> <code>mode</code> <code>int</code> <p>The file mode used for checking access.</p> <code>F_OK | X_OK</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of absolute paths to executables that match the given pattern.</p>"},{"location":"api/#find_exe.with_prefix","title":"<code>with_prefix(prefix: str, *, paths: list[str] | None = None, path: str | None = None, mode: int = os.F_OK | os.X_OK) -&gt; list[str]</code>","text":"<p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The prefix used for searching.</p> required <code>paths</code> <code>list[str] | None</code> <p>The list of paths to check. If <code>None</code>, the mutually exclusive <code>path</code> parameter is used.</p> <code>None</code> <code>path</code> <code>str | None</code> <p>The PATH to check, with each path separated by <code>os.pathsep</code>. If <code>None</code>, the PATH environment variable is used. Mutually exclusive with <code>paths</code>.</p> <code>None</code> <code>mode</code> <code>int</code> <p>The file mode used for checking access.</p> <code>F_OK | X_OK</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of absolute paths to executables that start with the given prefix.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Fixed:</p> <ul> <li>Fix potential case sensitivity issue on Windows when <code>PATHEXT</code> is defined explicitly</li> </ul>"},{"location":"changelog/#020-2024-09-24","title":"0.2.0 - 2024-09-24","text":"<p>Added:</p> <ul> <li>Add <code>paths</code> parameter to the API</li> </ul> <p>Fixed:</p> <ul> <li>Distribute a <code>py.typed</code> file</li> </ul>"},{"location":"changelog/#010-2024-09-22","title":"0.1.0 - 2024-09-22","text":"<p>This is the initial public release.</p>"}]}